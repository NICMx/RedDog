# Shiro's configuration
# (see more at http://shiro.apache.org/configuration.html#Configuration-INIConfiguration)

#--------------
# MAIN SECTION
#--------------
[main]

# DataSource used to get users and roles, parameters can be as specified
# in https://commons.apache.org/proper/commons-dbcp/configuration.html
# Uncomment the following lines and set custom values if needed:
#ds = org.apache.tomcat.dbcp.dbcp2.BasicDataSource
#ds.driverClassName = org.h2.Driver
#ds.url = jdbc:h2:mem:rdapDemo;MODE=MySQL;IGNORECASE=TRUE
#ds.username = demouser
#ds.password = demopass

# Custom realm, extended from Apache Shiro's JdbcRealm, uses the DataSource previously declared
# Uncomment if needed (provides Basic authentication using a Database connection)
#customRealm = mx.nic.rdap.server.shiro.CustomSecurityRealm
#customRealm.dataSource = $ds

# The default query used to retrieve account data for the user, must return the user's password
# Eg. If using the Red Dog's SQL Provider reference implementation the query will be:
# customRealm.authenticationQuery = SELECT rus_pass FROM rdap.rdap_user WHERE rus_name = ?
#customRealm.authenticationQuery = 

# The default query used to retrieve the roles that apply to a user, must return the roles names
# Eg. If using the Red Dog's SQL Provider reference implementation the query will be:
#customRealm.userRolesQuery = SELECT rar_name FROM rdap.rdap_user_role WHERE rus_name = ?
#customRealm.userRolesQuery = 

# Use the custom realm
# Uncomment the following line if authorization is going to be used
#securityManager.realms = $customRealm

# Use default web session manager, disable session cookies (patch to force authentication by request,
# basic behavior of REST)
# Uncomment the following lines if authorization is going to be used
#sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
#securityManager.sessionManager = $sessionManager
#securityManager.sessionManager.sessionIdCookieEnabled = false

# Use Basic HTTP Authentication, if needed it can be customized to another type of authentication
# Uncomment the following line if authorization is going to be used
#authcBasic = org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter

# Realm used at HTTP header "WWW-Authenticate" when responding a 401 code
# Uncomment the following line if authorization is going to be used
#authcBasic.applicationName = rdap-server

# Enable the authentication filter. By default is enabled, but if all the resources are ment to be public and the 
# authorization isn't optional nor required then this property can have the value "false"
# (see more at http://shiro.apache.org/web.html#enabling-and-disabling-filters)
# Uncomment the following line if authorization is going to be used
#authcBasic.enabled = true

# Example on how to use Hashed passwords. This can be customized, see more at:
# https://shiro.apache.org/configuration.html#encrypting-passwords
# https://shiro.apache.org/static/1.4.0/apidocs/org/apache/shiro/authc/credential/HashedCredentialsMatcher.html
# Uncomment these lines to use the example of users and passwords (Option 2: Hash with NO SALT) set ahead,
# or to customize the configuration.
#hashedMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
#hashedMatcher.hashAlgorithmName = SHA-256
#hashedMatcher.hashIterations = 500000
#hashedMatcher.storedCredentialsHexEncoded = true

# If no other Realm is used, then set the hashedMatcher to the default realm
#iniRealm.credentialsMatcher = $hashedMatcher
# If the 'customRealm' (extended from JdbcRealm) is being used, then set the matcher to that Realm
#customRealm.credentialsMatcher = $hashedMatcher

# If a SALT is used, then define the salt style at 'mx.nic.rdap.server.shiro.CustomSecurityRealm' constructor.
# See more at: https://shiro.apache.org/static/1.4.0/apidocs/org/apache/shiro/realm/jdbc/JdbcRealm.html

#--------------
# USERS SECTION
#--------------
# Uncomment these lines if users are going to be configured in this file.
# The hashed passwords are an example to use with the 'hashedMatcher', see more at:
# https://shiro.apache.org/configuration.html#Configuration-%5Cusers%5C and
# https://shiro.apache.org/command-line-hasher.html

#[users]
# Option 1: Without hash
#alvin = alvin
#bob = bob

# Option 2: Hash with NO SALT
# Hash obtained with: java -jar shiro-tools-hasher-1.3.2-cli.jar -a SHA-256 -i 500000 -f hex alvin
#alvin = 3029b98a65580966962d5bd2d7b65dce74fb516ead1fe5875c806574eed51d29
# Hash obtained with: java -jar shiro-tools-hasher-1.3.2-cli.jar -a SHA-256 -i 500000 -f hex bob
#bob = 6aa575bc586fa4b3dbc017a717995443141dbb7d0d800dd06d74a5f5e9ba1895

# Option 3: Hash with SALT equal to the username
# NOTE: can only be used with a Realm that can return the salt (eg. using a JdbcRealm the salt returned depends
# of the 'SaltStyle' defined)
# Hash obtained with: java -jar shiro-tools-hasher-1.3.2-cli.jar -a SHA-256 -s alvin -i 500000 -f hex alvin
#alvin = 33e28cfbe4ce096cb4b131348cac50fd16899093bf9f01da7ba74d492b89bac8
# Hash obtained with: java -jar shiro-tools-hasher-1.3.2-cli.jar -a SHA-256 -s bob -i 500000 -f hex bob
#bob = caf0ad23508d4757baf149159b6afadfe5e1a0072c3282946feb8379cbade3ce

#--------------
# URLS SECTION
#--------------
[urls]

# Restricted paths that need authentication (one path per line)
#/domains/** = authcBasic
#/nameservers/** = authcBasic
#/entities/** = authcBasic

# Public paths, by default authentication isn't enabled. If needed, the public paths can be prepared to
# receive credentials if they are sent (use the filter 'authcBasic[permissive]').
# DO NOT COMMENT/ERASE, if the use of credentials isn't required then set '{auth-filter}.enabled = false' or
# also the filter 'anon' can be used (see more at Red Dog docs
# https://www.reddog.mx/using-apache-shiro.html#disable-basic-authentication).
#/** = authcBasic[permissive]
/** = anon